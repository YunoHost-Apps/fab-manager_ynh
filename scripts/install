#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

admin_mail=$(ynh_user_get_info --username="$admin" --key=mail)

secret_key_base=$(ynh_string_random --length=30)
ynh_app_setting_set --key="secret_key_base" --value="$secret_key_base"

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression "Installing NodeJS..."
ynh_nodejs_install

ynh_script_progression "Installing Ruby..."
ynh_ruby_install

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_script_progression "Configuring $app's PostgreSQL database..."

ynh_psql_db_shell  <<< "ALTER USER $db_user WITH SUPERUSER;"
ynh_psql_db_shell  <<< "CREATE EXTENSION IF NOT EXISTS unaccent;"
ynh_psql_db_shell  <<< "CREATE EXTENSION IF NOT EXISTS pg_trgm;"
ynh_psql_db_shell  <<< "CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;"
ynh_psql_db_shell  <<< "ALTER USER $db_user WITH NOSUPERUSER;"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir"

#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod -R o-rwx "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R "$app:www-data" "$install_dir"
chmod -R o-rwx "$data_dir"
chown -R "$app:www-data" "$data_dir"

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration..."

ynh_config_add --template="secrets.yml" --destination="$install_dir/config/secrets.yml"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 400 "$install_dir/config/secrets.yml"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown "$app:$app" "$install_dir/config/secrets.yml"

ynh_config_add --template="database.yml" --destination="$install_dir/config/database.yml"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 400 "$install_dir/config/database.yml"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown "$app:$app" "$install_dir/config/database.yml"

#=================================================
# BUILD APP
#=================================================
ynh_script_progression "Building app..."

fabmanager_build_ruby

fabmanager_migrate_db
fabmanager_seed_db

fabmanager_build_ui

ynh_safe_rm "$install_dir/.cache"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

# Create a dedicated NGINX config
ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add_systemd --service="$app-app" --template="fab-manager-app.service"
yunohost service add "$app-app" --description="$app app service"
ynh_config_add_systemd --service="$app-worker" --template="fab-manager-worker.service"
yunohost service add "$app-worker" --description="$app worker service"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="${app}-app" --action="start" --log_path=systemd
ynh_systemctl --service="${app}-worker" --action="start" --log_path=systemd --wait_until="Schedules Loaded"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
